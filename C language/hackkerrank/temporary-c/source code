#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int perm,count=0;

int permutation(int n)
{
    if(n==1)
    return 1;
    else 
    return(n*permutation(n-1));
}

void swap(char **a, char **b)
{
    char* temp=*a;
    *a=*b;
    *b=temp;
}

void reverse(char **s, int n, int k )
{
int i;
for(i=k;i<=((n-k-1)/2);i++)
{
  swap(&s[k],&s[n-1-i]);  
}
}

int next_permutation(int n, char **s)
{
    int inv=-1,i,j,k;
    if(count==0)
    perm=permutation(n);
    count++;
    for(i=0;i<n-1;i++)
    {
    if(strcmp(s[i],s[i+1])<0)
    inv++; 
    }
    if (inv==-1)
    return 0;
    for(i=n-2;i>=0;i--)
    {
        if(strcmp(s[i],s[i+1])<0)
        break;
        if(s[i] < s[i+1])
        {
            for(j=0;j<n;j++)
            {
                k=i+1;
                if(s[j]>s[i] && s[j]<s[i+1])
                k=j;
            }        
        }                        
            swap(&s[i],&s[k]);
            reverse(s,n,k);
            return 1;  
    }
    if(count==perm)
    return 0; 
    else 
    return 1;  
}

int main()
{
	char **s;
	int n;
	scanf("%d", &n);
	s = calloc(n, sizeof(char*));
	for (int i = 0; i < n; i++)
	{
		s[i] = calloc(11, sizeof(char));
		scanf("%s", s[i]);
	}
	do
	{
		for (int i = 0; i < n; i++)
			printf("%s%c", s[i], i == n - 1 ? '\n' : ' ');
	} while (next_permutation(n, s));
	for (int i = 0; i < n; i++)
		free(s[i]);
	free(s);
	return 0;
}
